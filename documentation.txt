Pass 1 documentation:
I completed all the requirements of the project accurately to my knowledge.
My Pass 1 of the SIC Assembler works in this order; read token > write to stdout > increment address > read next line;
with the exception of the START token.
All the symbols along with their addresses are stored in a hashtable which I've verified works using Visual Studio variable watch.
My hash function works by adding up the ASCII values of all characters in a string and multiplying that sum by 3 (to reduce collisions).

I don't think there was anything I forgot to implement on this project,
I made sure to free the memory aside from the chunks allocated for the hashtable, since that memory may be used in Pass 2 and beyond.
I've handled the following error cases:
Duplicate symbol, Invalid symbol, Invalid hex or char constants, Duplicate START and END, Directive missing required parameters (START, END)
Program out of memory, Word constant too large, Missing or incorrectly formatted START directive

Pass 2 documentation:
I wrote all the object codes for the text records correctly to my knowledge.
I didn't bother with compressing the text records, but I acknowledge that it could be done.
My Pass 2 assembler creates a new text record for every instruction except the ones with opcodes that reserve space (namely RESW and RESB)

Since I check whether or not an opcode is valid in Pass 1, I don't have to do it for Pass 2.
This, and passing an invalid symbol as an operand seemed to be the only error cases I found possible to check for in Pass 2.
As a result, I check only one error in Pass 2.